# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:14:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class ClientRequestToken(
    RootModel[constr(pattern=r'^[\w:/-]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[\w:/-]+$', min_length=1, max_length=256)


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConfigurationException(RootModel[Any]):
    root: Any


class CreatedTimestamp(RootModel[datetime]):
    root: datetime


class DeleteTargetResult(BaseModel):
    pass


class DetailType(Enum):
    BASIC = 'BASIC'
    FULL = 'FULL'


class EventTypeId(RootModel[constr(min_length=1, max_length=200)]):
    root: constr(min_length=1, max_length=200)


class EventTypeIds(RootModel[List[EventTypeId]]):
    root: List[EventTypeId]


class EventTypeName(RootModel[str]):
    root: str


class ForceUnsubscribeAll(RootModel[bool]):
    root: bool


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class LastModifiedTimestamp(RootModel[datetime]):
    root: datetime


class LimitExceededException(RootModel[Any]):
    root: Any


class ListEventTypesFilterName(Enum):
    RESOURCE_TYPE = 'RESOURCE_TYPE'
    SERVICE_NAME = 'SERVICE_NAME'


class ListEventTypesFilterValue(RootModel[str]):
    root: str


class ListNotificationRulesFilterName(Enum):
    EVENT_TYPE_ID = 'EVENT_TYPE_ID'
    CREATED_BY = 'CREATED_BY'
    RESOURCE = 'RESOURCE'
    TARGET_ADDRESS = 'TARGET_ADDRESS'


class ListNotificationRulesFilterValue(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class ListTargetsFilterName(Enum):
    TARGET_TYPE = 'TARGET_TYPE'
    TARGET_ADDRESS = 'TARGET_ADDRESS'
    TARGET_STATUS = 'TARGET_STATUS'


class ListTargetsFilterValue(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class NextToken(RootModel[constr(pattern=r'^[\w/+=]+$')]):
    root: constr(pattern=r'^[\w/+=]+$')


class NotificationRuleArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$'
    )


class NotificationRuleCreatedBy(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class NotificationRuleId(RootModel[constr(min_length=1, max_length=40)]):
    root: constr(min_length=1, max_length=40)


class NotificationRuleName(RootModel[SecretStr]):
    root: SecretStr


class NotificationRuleResource(
    RootModel[constr(pattern=r'^arn:aws[^:\s]*:[^:\s]*:[^:\s]*:[0-9]{12}:[^\s]+$')]
):
    root: constr(pattern=r'^arn:aws[^:\s]*:[^:\s]*:[^:\s]*:[0-9]{12}:[^\s]+$')


class NotificationRuleStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class NotificationRuleSummary(BaseModel):
    Arn: Optional[NotificationRuleArn] = None
    Id: Optional[NotificationRuleId] = None


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceType(RootModel[constr(pattern=r'^([a-zA-Z0-9-])+$', min_length=1)]):
    root: constr(pattern=r'^([a-zA-Z0-9-])+$', min_length=1)


class ServiceName(RootModel[str]):
    root: str


class SubscribeResult(BaseModel):
    Arn: Optional[NotificationRuleArn] = None


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagValue(
    RootModel[constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)]
):
    root: constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)


class Tags(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TargetAddress(RootModel[SecretStr]):
    root: SecretStr


class TargetStatus(Enum):
    PENDING = 'PENDING'
    ACTIVE = 'ACTIVE'
    UNREACHABLE = 'UNREACHABLE'
    INACTIVE = 'INACTIVE'
    DEACTIVATED = 'DEACTIVATED'


class TargetType(RootModel[constr(pattern=r'^[A-Za-z]+$')]):
    root: constr(pattern=r'^[A-Za-z]+$')


class UnsubscribeRequest(BaseModel):
    Arn: NotificationRuleArn
    TargetAddress_1: TargetAddress = Field(..., alias='TargetAddress')


class UnsubscribeResult(BaseModel):
    Arn: NotificationRuleArn


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResult(BaseModel):
    pass


class UpdateNotificationRuleResult(BaseModel):
    pass


class ValidationException(RootModel[Any]):
    root: Any


class Status(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class DeleteNotificationRulePostRequest(BaseModel):
    Arn: constr(
        pattern=r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the notification rule you want to delete.',
    )


class DeleteTargetPostRequest(BaseModel):
    ForceUnsubscribeAll: Optional[bool] = Field(
        None,
        description='A Boolean value that can be used to delete all associations with this Chatbot topic. The default value is FALSE. If set to TRUE, all associations between that target and every notification rule in your Amazon Web Services account are deleted.',
    )
    TargetAddress: SecretStr = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the Chatbot topic or Chatbot client to delete.',
    )


class DescribeNotificationRulePostRequest(BaseModel):
    Arn: constr(
        pattern=r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$'
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the notification rule.'
    )


class ListTagsForResourcePostRequest(BaseModel):
    Arn: constr(
        pattern=r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$'
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) for the notification rule.'
    )


class Target(BaseModel):
    TargetAddress_1: Optional[TargetAddress] = Field(None, alias='TargetAddress')
    TargetType_1: Optional[TargetType] = Field(None, alias='TargetType')


class SubscribePostRequest(BaseModel):
    Arn: constr(
        pattern=r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the notification rule for which you want to create the association.',
    )
    ClientRequestToken: Optional[
        constr(pattern=r'^[\w:/-]+$', min_length=1, max_length=256)
    ] = Field(
        None,
        description='An enumeration token that, when provided in a request, returns the next batch of the results.',
    )
    Target_1: Target = Field(
        ...,
        alias='Target',
        description='Information about the Chatbot topics or Chatbot clients associated with a notification rule.',
    )


class TagResourcePostRequest(BaseModel):
    Arn: constr(
        pattern=r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$'
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the notification rule to tag.',
    )
    Tags: Dict[str, TagValue] = Field(
        ...,
        description='The list of tags to associate with the resource. Tag key names cannot start with "<code>aws</code>".',
    )


class UnsubscribePostRequest(BaseModel):
    Arn: constr(
        pattern=r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$'
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the notification rule.'
    )
    TargetAddress: SecretStr = Field(
        ...,
        description='The ARN of the Chatbot topic to unsubscribe from the notification rule.',
    )


class CreateNotificationRuleResult(BaseModel):
    Arn: Optional[NotificationRuleArn] = None


class DeleteNotificationRuleRequest(BaseModel):
    Arn: NotificationRuleArn


class DeleteNotificationRuleResult(BaseModel):
    Arn: Optional[NotificationRuleArn] = None


class DeleteTargetRequest(BaseModel):
    ForceUnsubscribeAll_1: Optional[ForceUnsubscribeAll] = Field(
        None, alias='ForceUnsubscribeAll'
    )
    TargetAddress_1: TargetAddress = Field(..., alias='TargetAddress')


class DescribeNotificationRuleRequest(BaseModel):
    Arn: NotificationRuleArn


class EventTypeSummary(BaseModel):
    EventTypeId_1: Optional[EventTypeId] = Field(None, alias='EventTypeId')
    EventTypeName_1: Optional[EventTypeName] = Field(None, alias='EventTypeName')
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    ServiceName_1: Optional[ServiceName] = Field(None, alias='ServiceName')


class ListEventTypesFilter(BaseModel):
    Name: ListEventTypesFilterName
    Value: ListEventTypesFilterValue


class ListEventTypesFilters(RootModel[List[ListEventTypesFilter]]):
    root: List[ListEventTypesFilter]


class ListEventTypesRequest(BaseModel):
    Filters: Optional[ListEventTypesFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListNotificationRulesFilter(BaseModel):
    Name: ListNotificationRulesFilterName
    Value: ListNotificationRulesFilterValue


class ListNotificationRulesFilters(RootModel[List[ListNotificationRulesFilter]]):
    root: List[ListNotificationRulesFilter]


class ListNotificationRulesRequest(BaseModel):
    Filters: Optional[ListNotificationRulesFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceRequest(BaseModel):
    Arn: NotificationRuleArn


class ListTagsForResourceResult(BaseModel):
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class ListTargetsFilter(BaseModel):
    Name: ListTargetsFilterName
    Value: ListTargetsFilterValue


class ListTargetsFilters(RootModel[List[ListTargetsFilter]]):
    root: List[ListTargetsFilter]


class ListTargetsRequest(BaseModel):
    Filters: Optional[ListTargetsFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class NotificationRuleBatch(RootModel[List[NotificationRuleSummary]]):
    root: List[NotificationRuleSummary]


class TagResourceRequest(BaseModel):
    Arn: NotificationRuleArn
    Tags_1: Tags = Field(..., alias='Tags')


class TagResourceResult(BaseModel):
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class TargetSummary(BaseModel):
    TargetAddress_1: Optional[TargetAddress] = Field(None, alias='TargetAddress')
    TargetStatus_1: Optional[TargetStatus] = Field(None, alias='TargetStatus')
    TargetType_1: Optional[TargetType] = Field(None, alias='TargetType')


class Targets(RootModel[List[Target]]):
    root: List[Target] = Field(..., max_length=10)


class TargetsBatch(RootModel[List[TargetSummary]]):
    root: List[TargetSummary]


class UpdateNotificationRuleRequest(BaseModel):
    Arn: NotificationRuleArn
    DetailType_1: Optional[DetailType] = Field(None, alias='DetailType')
    EventTypeIds_1: Optional[EventTypeIds] = Field(None, alias='EventTypeIds')
    Name: Optional[NotificationRuleName] = None
    Status: Optional[NotificationRuleStatus] = None
    Targets_1: Optional[Targets] = Field(None, alias='Targets')


class CreateNotificationRulePostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[\w:/-]+$', min_length=1, max_length=256)
    ] = Field(
        None,
        description='<p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request with the same parameters is received and a token is included, the request returns information about the initial request that used that token.</p> <note> <p>The Amazon Web Services SDKs prepopulate client request tokens. If you are using an Amazon Web Services SDK, an idempotency token is created for you.</p> </note>',
    )
    DetailType_1: DetailType = Field(
        ...,
        alias='DetailType',
        description='The level of detail to include in the notifications for this resource. <code>BASIC</code> will include only the contents of the event as it would appear in Amazon CloudWatch. <code>FULL</code> will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.',
    )
    EventTypeIds: List[EventTypeId] = Field(
        ...,
        description='A list of event types associated with this notification rule. For a list of allowed events, see <a>EventTypeSummary</a>.',
    )
    Name: SecretStr = Field(
        ...,
        description='The name for the notification rule. Notification rule names must be unique in your Amazon Web Services account.',
    )
    Resource: constr(pattern=r'^arn:aws[^:\s]*:[^:\s]*:[^:\s]*:[0-9]{12}:[^\s]+$') = (
        Field(
            ...,
            description='The Amazon Resource Name (ARN) of the resource to associate with the notification rule. Supported resources include pipelines in CodePipeline, repositories in CodeCommit, and build projects in CodeBuild.',
        )
    )
    Status_1: Optional[Status] = Field(
        None,
        alias='Status',
        description="The status of the notification rule. The default value is <code>ENABLED</code>. If the status is set to <code>DISABLED</code>, notifications aren't sent for the notification rule.",
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of tags to apply to this notification rule. Key names cannot start with "<code>aws</code>". ',
    )
    Targets: List[Target] = Field(
        ...,
        description='A list of Amazon Resource Names (ARNs) of Amazon Simple Notification Service topics and Chatbot clients to associate with the notification rule.',
        max_length=10,
    )


class ListEventTypesPostRequest(BaseModel):
    Filters: Optional[List[ListEventTypesFilter]] = Field(
        None,
        description='The filters to use to return information by service or resource type.',
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='A non-negative integer used to limit the number of returned results. The default number is 50. The maximum number of results that can be returned is 100.',
    )
    NextToken: Optional[constr(pattern=r'^[\w/+=]+$')] = Field(
        None,
        description='An enumeration token that, when provided in a request, returns the next batch of the results.',
    )


class ListNotificationRulesPostRequest(BaseModel):
    Filters: Optional[List[ListNotificationRulesFilter]] = Field(
        None,
        description='<p>The filters to use to return information by service or resource type. For valid values, see <a>ListNotificationRulesFilter</a>.</p> <note> <p>A filter with the same name can appear more than once when used with OR statements. Filters with different names should be applied with AND statements.</p> </note>',
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='A non-negative integer used to limit the number of returned results. The maximum number of results that can be returned is 100.',
    )
    NextToken: Optional[constr(pattern=r'^[\w/+=]+$')] = Field(
        None,
        description='An enumeration token that, when provided in a request, returns the next batch of the results.',
    )


class ListTargetsPostRequest(BaseModel):
    Filters: Optional[List[ListTargetsFilter]] = Field(
        None,
        description='<p>The filters to use to return information by service or resource type. Valid filters include target type, target address, and target status.</p> <note> <p>A filter with the same name can appear more than once when used with OR statements. Filters with different names should be applied with AND statements.</p> </note>',
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='A non-negative integer used to limit the number of returned results. The maximum number of results that can be returned is 100.',
    )
    NextToken: Optional[constr(pattern=r'^[\w/+=]+$')] = Field(
        None,
        description='An enumeration token that, when provided in a request, returns the next batch of the results.',
    )


class UpdateNotificationRulePostRequest(BaseModel):
    Arn: constr(
        pattern=r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$'
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the notification rule.'
    )
    DetailType_1: Optional[DetailType] = Field(
        None,
        alias='DetailType',
        description='The level of detail to include in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.',
    )
    EventTypeIds: Optional[List[EventTypeId]] = Field(
        None,
        description='A list of event types associated with this notification rule. For a complete list of event types and IDs, see <a href="https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api">Notification concepts</a> in the <i>Developer Tools Console User Guide</i>.',
    )
    Name: Optional[SecretStr] = Field(
        None, description='The name of the notification rule.'
    )
    Status_1: Optional[Status] = Field(
        None,
        alias='Status',
        description='The status of the notification rule. Valid statuses include enabled (sending notifications) or disabled (not sending notifications).',
    )
    Targets: Optional[List[Target]] = Field(
        None,
        description='The address and type of the targets to receive notifications from this notification rule.',
        max_length=10,
    )


class CreateNotificationRuleRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DetailType_1: DetailType = Field(..., alias='DetailType')
    EventTypeIds_1: EventTypeIds = Field(..., alias='EventTypeIds')
    Name: NotificationRuleName
    Resource: NotificationRuleResource
    Status: Optional[NotificationRuleStatus] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Targets_1: Targets = Field(..., alias='Targets')


class EventTypeBatch(RootModel[List[EventTypeSummary]]):
    root: List[EventTypeSummary]


class ListEventTypesResult(BaseModel):
    EventTypes: Optional[EventTypeBatch] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListNotificationRulesResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    NotificationRules: Optional[NotificationRuleBatch] = None


class ListTargetsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Targets: Optional[TargetsBatch] = None


class SubscribeRequest(BaseModel):
    Arn: NotificationRuleArn
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Target_1: Target = Field(..., alias='Target')


class DescribeNotificationRuleResult(BaseModel):
    Arn: NotificationRuleArn
    CreatedBy: Optional[NotificationRuleCreatedBy] = None
    CreatedTimestamp_1: Optional[CreatedTimestamp] = Field(
        None, alias='CreatedTimestamp'
    )
    DetailType_1: Optional[DetailType] = Field(None, alias='DetailType')
    EventTypes: Optional[EventTypeBatch] = None
    LastModifiedTimestamp_1: Optional[LastModifiedTimestamp] = Field(
        None, alias='LastModifiedTimestamp'
    )
    Name: Optional[NotificationRuleName] = None
    Resource: Optional[NotificationRuleResource] = None
    Status: Optional[NotificationRuleStatus] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Targets: Optional[TargetsBatch] = None
